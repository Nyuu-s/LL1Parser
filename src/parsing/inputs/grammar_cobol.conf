cobol-source-program	=	( "IDENTIFICATION" | "ID" ) "DIVISION" "." program-id-cobol-source-program
[ identification-division-content ]
[ "ENVIRONMENT" "DIVISION" "." environment-division-content ]
[ "DATA" "DIVISION" "." data-division-content ]
[ procedure-division ]
[ { nested-cobol-source-program }* "END" "PROGRAM" program-name "." ]

identification-division-content	=	( [ "AUTHOR" [ "." ] { comment-entry }* ]
|| [ "INSTALLATION" [ "." ] { comment-entry }* ]
|| [ "DATE-WRITTEN" [ "." ] { comment-entry }* ]
|| [ "DATE-COMPILED" [ "." ] { comment-entry }* ]
|| [ "SECURITY" [ "." ] { comment-entry }* ] )

program-id-cobol-source-program	=	"PROGRAM-ID" [ "." ] program-name
[ [ "IS" ] "INITIAL" [ "PROGRAM" ] ] [ "." ]



environment-division-content = 	[ configuration-section ] [ input-output-section ]
configuration-section = "CONFIGURATION" "SECTION" "." configuration-section-paragraphs
configuration-section-paragraphs = [ source-computer-paragraph ] [ object-computer-paragraph ]
[ special-names-paragraph ]
source-computer-paragraph =	"SOURCE-COMPUTER" "."
[ computer-name [ [ "WITH" ] "DEBUGGING" "MODE" ] "." ]
object-computer-paragraph =	"OBJECT-COMPUTER" "."
[ computer-name [ "MEMORY" [ "SIZE" ] integer ( "WORDS" | "CHARACTERS" | "MODULES" ) ] object-computer-paragraph-sequence-phrase "." ]
object-computer-paragraph-sequence-phrase	=	[ [ "PROGRAM" ] [ "COLLATING" ] "SEQUENCE" [ "IS" ] alphabet-name ]
[ "SEGMENT-LIMIT" [ "IS" ] priority-number ]


special-names-paragraph = 	"SPECIAL-NAMES" "." { ( ( environment-name [ "IS" ] mnemonic-name ) 
| ( environment-name ( ( [ "IS" ] mnemonic-name [ special-names-paragraph-status-phrase ] ) | special-names-paragraph-status-phrase ) ) ) }* special-names-paragraph-clauses [ "." ]

special-names-paragraph-status-phrase = ( ( "ON" [ "STATUS" ] [ "IS" ] condition [ "OFF" [ "STATUS" ] [ "IS" ] condition ] ) | ( "OFF" [ "STATUS" ] [ "IS" ] condition [ "ON" [ "STATUS" ] [ "IS" ] condition ] ) )

condition = combinable-condition | combined-conditions 

combinable-condition =	simple-condition | negated-simple-conditions | abbreviated-combined-relation-conditions

simple-condition	=	class-condition | condition-name-condition | relation-condition | sign-condition | switch-status-condition | ( "(" condition ")" ) 

class-condition	=	identifier [ "IS" ] [ "NOT" ] "NUMERIC" | "ALPHABETIC" | "ALPHABETIC-LOWER" | "ALPHABETIC-UPPER" | class-name | "DBCS" | "KANJI" 

identifier	=	( qualified-data-name { "(" subscript ")" }* [ "(" leftmost-character-position ":" [ length ] ")" ] ) 
| ( "LINAGE-COUNTER" [ ( "IN" | "OF" ) file-name ] )

qualified-data-name	=	( data-name { ( "IN" | "OF" ) data-name }* [ ( "IN" | "OF" ) file-name ] )
| special-register

special-register	= ( "ADDRESS" "OF" data-name )
| "DEBUG-ITEM"
| ( "LENGTH" "OF" identifier )
| "RETURN-CODE"
| "SHIFT-OUT"
| "SHIFT-IN"
| "SORT-CONTROL"
| "SORT-CORE-SIZE"
| "SORT-FILE-SIZE"
| "SORT-MESSAGE"
| "SORT-MODE-SIZE"
| "SORT-RETURN"
| "TALLY"
| "WHEN-COMPILED" 

length	=	arithmetic-expression
subscript	=	{ ( ( integer | ( qualified-data-name [ ( "+" | "-" ) integer ] ) ) | ( index-name [ ( "+" | "-" ) integer ] )) }+
leftmost-character-position	=	arithmetic-expression
arithmetic-expression	=	times-div { ( "+" | "-" ) times-div }*
times-div	=	power { ( "*" | "/" ) power }*
power	=	[ ( "+" | "-" ) ] basis { "**" basis }*
basis	=	( identifier | literal | ("(" arithmetic-expression ")" ) )
literal	=	( nonnumeric | numeric | dbcs | figurative-constant )

figurative-constant	=	( "ZERO" | "ZEROS" | "ZEROES"
| "SPACE" | "SPACES"
| "HIGH-VALUE" | "HIGH-VALUES"
| "LOW-VALUE" | "LOW-VALUES"
| "QUOTE" | "QUOTES"
| ( "ALL" literal )
| "NULL" | "NULLS" )

negated-simple-conditions	=	"NOT" condition

condition-name-condition	=	condition-name-reference
switch-status-condition	=	condition-name-reference
condition-name-reference	=	condition-name { ( "IN" | "OF" ) data-name }*
[ ( "IN" | "OF" ) file-name ] { "(" subscript ")" }*

relation-condition	=	arithmetic-expression relational-operator
arithmetic-expression
relational-operator	=	[ "IS" ]
( ( [ "NOT" ] ( "GREATER" [ "THAN" ] ) | ">" | ( "LESS" [ "THAN" ] ) | "<" | ( "EQUAL" [ "TO" ] ) | "=" )
| ( "GREATER" [ "THAN" ] "OR" "EQUAL" [ "TO" ] )
| ">="
| ( "LESS" [ "THAN" ] "OR" "EQUAL" [ "TO" ] )
| ( "<" "=" ))

sign-condition	=	arithmetic-expression [ "IS" ] [ "NOT" ] ( "POSITIVE" | "NEGATIVE" | "ZERO" )

combined-conditions	=	combinable-condition { ( "AND" | "OR" ) combinable-condition }+

abbreviated-combined-relation-conditions = relation-condition abbreviation-rest

special-names-paragraph-clauses	=	( { alphabet-clause }*
|| { symbolic-characters-clause }*
|| { class-clause }*
|| [ currency-sign-clause ]
|| [ decimal-point-clause ] )

abbreviation-leaf	=	( arithmetic-expression | ( "(" arithmetic-expression abbreviation-rest ")" ) )
abbreviation-rest	=	{ ( "AND" | "OR" ) [ "NOT" ] [ relational-operator ] abbreviation-leaf }+
currency-sign-clause	=	"CURRENCY" [ "SIGN" ] [ "IS" ] literal
decimal-point-clause	=	"DECIMAL-POINT" [ "IS" ] "COMMA"

alphabet-clause	=	"ALPHABET" alphabet-name [ "IS" ] ( "STANDARD-1" | "STANDARD-2" | "NATIVE" | "EBCDIC" | ( { literal [ ( ( "THROUGH" | "THRU" ) literal | { "ALSO" literal }+ ) ] }+ ) )
symbolic-characters-clause	=	"SYMBOLIC" [ "CHARACTERS" ] { { symbolic-character }+ [ ( "ARE" | "IS" ) ] { integer }+ }+ [ "IN" alphabet-name ]
class-clause	=	"CLASS" class-name [ "IS" ] { literal [ ( "THROUGH" | "THRU" ) literal ] }+

procedure-division = "proc-div"
nested-cobol-source-program = "nested-cbol"
data-division-content = "data-div"
input-output-section	=	"INPUT-OUTPUT" "SECTION" "." [ file-control-paragraph ] [ i-o-control-paragraph ]
file-control-paragraph	=	"FILE-CONTROL" "." 
reserve-clause	=	"RESERVE" integer [ ( "AREA" | "AREAS" ) ]
padding-character-clause	=	"PADDING" [ "CHARACTER" ] [ "IS" ] ( qualified-data-name | literal )
record-delimiter-clause	=	"RECORD" "DELIMITER" [ "IS" ] ( "STANDARD-1" | assignment-name )
password-clause	=	"PASSWORD" [ "IS" ] data-name
file-status-clause	=	[ "FILE" ] "STATUS" [ "IS" ] qualified-data-name [ qualified-data-name ]
relative-key-clause	=	"RELATIVE" [ "KEY" ] [ "IS" ] qualified-data-name
record-key-clause	=	"RECORD" [ "KEY" ] [ "IS" ] qualified-data-name
alternate-record-key-clause	=	"ALTERNATE" [ "RECORD" ] [ "KEY" ] [ "IS" ] qualified-data-name [ password-clause ] [ [ "WITH" ] "DUPLICATES" ]
i-o-control-paragraph = "b"
assignment-name	=	?= SYMBOL
symbolic-character	?= SYMBOL
dbcs ?= SYMBOL
numeric ?= NUMERIC
nonnumeric ?= NONNUM
alphabet-name ?= SYMBOL
file-name ?= SYMBOL
data-name ?= SYMBOL
class-name ?= SYMBOL
index-name ?= SYMBOL
condition-name	?= SYMBOL
mnemonic-name ?= SYMBOL
environment-name ?= SYMBOL
program-name ?= SYMBOL
computer-name ?= SYMBOL
comment-entry ?= SYMBOL
priority-number ?= PNUMBER
integer ?= pnumber